// standards for screen sizes (media queries)
@mixin respond($breakpoint) {
  @if $breakpoint ==phone-tall {
    @media (min-width: 320px) {
      html {
        font-size: 1rem;
      }

      @content;
    }
  }

  @if $breakpoint ==phone-wide {
    @media (max-width: 576px) {
      html {
        font-size: 1rem;
      }

      @content;
    }
  }

  @if $breakpoint ==tablet {

    @media (max-width: 768px),
    (min-width: 577px) {
      html {
        font-size: 1.0625rem
      }

      @content;
    }
  }

  @if $breakpoint ==desktop {
    @media (min-width: 769px) {
      html {
        font-size: 1.1875rem;
      }

      @content;
    }
  }

  @if $breakpoint ==desktopXL {
    @media (min-width: 1800px) {
      html {
        font-size: 1.1875rem;
      }

      @content;
    }
  }
}

// flexbox mixin
@mixin flexbox($flex-direction: false,
  $justify-content: false,
  $align-items: false,
  $gap: false,
  $flex: false) {
  display: flex;

  @if $flex-direction !=false {
    flex-direction: $flex-direction;
  }

  @if $justify-content !=false {
    justify-content: $justify-content;
  }

  @if $align-items !=false {
    align-items: $align-items;
  }

  @if $gap !=false {
    gap: $gap;
  }
}

@function text3D($depth, $color) {
  $value: '0px 0px 0 #{$color}';

  @for $i from 1 through $depth {
    $value: '#{$value} , #{$i * 1}px #{$i * 1}px 0'+$color;
  }

  @return unquote($value);
}

//angled background mixin
@mixin angle($pseudo, $flip: false, $angle: 4deg) {

  // Possible values for $pseudo are: before, after, both
  @if $pseudo =='before' or $pseudo =='after' or $pseudo =='both' {
    position: relative;
    z-index: 1;
    $selector: if($pseudo =='both', '&:before,&:after', '&:#{$pseudo}');

    #{$selector} {
      background: inherit;
      content: '';
      display: block;
      height: 50%;
      left: 0;
      position: absolute;
      right: 0;
      z-index: -1;
    }

    @if $pseudo =='before' {
      #{$selector} {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        }

        @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }
    }

    @if $pseudo =='after' {
      #{$selector} {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 100%;
        }

        @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }

    @if $pseudo =='both' {
      &:before {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        }

        @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }

      &:after {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 0;
        }

        @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }
  }
}